{
  "Hic_music": "Generation of music tones.",
  "Hic_music.beat": "Returns the duration of a beat in milli-seconds",
  "Hic_music.beginMelody": "Starts playing a melody.\nNotes are expressed as a string of characters with this format: NOTE[octave][:duration]",
  "Hic_music.beginMelody|param|melodyArray": "the melody array to play",
  "Hic_music.beginMelody|param|options": "melody options, once / forever, in the foreground / background",
  "Hic_music.builtInMelody": "Gets the melody array of a built-in melody.",
  "Hic_music.changeTempoBy": "Change the tempo by the specified amount",
  "Hic_music.changeTempoBy|param|bpm": "The change in beats per minute to the tempo, eg: 20",
  "Hic_music.noteFrequency": "Gets the frequency of a note.",
  "Hic_music.noteFrequency|param|name": "the note name",
  "Hic_music.onEvent": "Registers code to run on various melody events",
  "Hic_music.playTone": "Plays a tone through pin ``P5`` for the given duration.",
  "Hic_music.playTone|param|frequency": "pitch of the tone to play in Hertz (Hz), eg: Note.C",
  "Hic_music.playTone|param|ms": "tone duration in milliseconds (ms)",
  "Hic_music.rest": "Rests (plays nothing) for a specified time through pin ``P5``.",
  "Hic_music.rest|param|ms": "rest duration in milliseconds (ms)",
  "Hic_music.ringTone": "Plays a tone through pin ``P5``.",
  "Hic_music.ringTone|param|frequency": "pitch of the tone to play in Hertz (Hz), eg: Note.C",
  "Hic_music.setPlayTone": "Sets a custom playTone function for playing melodies",
  "Hic_music.setTempo": "Sets the tempo to the specified amount",
  "Hic_music.setTempo|param|bpm": "The new tempo in beats per minute, eg: 120",
  "Hic_music.stopMelody": "Stops the melodies",
  "Hic_music.stopMelody|param|options": "which melody to stop",
  "Hic_music.tempo": "Returns the tempo in beats per minute. Tempo is the speed (bpm = beats per minute) at which notes play. The larger the tempo value, the faster the notes will play.",
  "hicbit.Buzzer": "Buzzer",
  "hicbit.Clearscreen": "Display clear",
  "hicbit.getServosAngle": "Get servos angle",
  "hicbit.get_DHT11_value": "Get DHT11 temperature and humidity value.",
  "hicbit.hicbit_Init": "hicbit initialization, please execute at boot time",
  "hicbit.hicbit_SoundSensor": "Set the Sound sensor status,1 detect the sound source,0 no detect the sound source",
  "hicbit.hicbit_actionRunover": "Wait for Actiongroup Finishing",
  "hicbit.hicbit_avoidSensor": "Get the obstacle avoidance sensor status,1 detect obstacle,0 no detect obstacle",
  "hicbit.hicbit_belt_clearLight": "Clear the color of the colored lights and turn off the lights.",
  "hicbit.hicbit_belt_initRGBLight": "Initialize Light belt",
  "hicbit.hicbit_belt_setPixelRGB": "Set the color of the colored lights, after finished the setting please perform  the display of colored lights.",
  "hicbit.hicbit_belt_showLight": "Display the colored lights, and set the color of the colored lights to match the use. After setting the color of the colored lights, the color of the lights must be displayed.",
  "hicbit.hicbit_getBatVoltage": "// * Get the volume level detected by the sound sensor, range 0 to 255\n// \nGet hicbit current voltage,the unit is mV",
  "hicbit.hicbit_getKnobValue": "Get the ad value of the knob moudule",
  "hicbit.hicbit_getSoundsensorValue": "Get the ad value of the Sound sensor moudule",
  "hicbit.hicbit_getavoidSensorValue": "Get the ad value of the avoid Sensor moudule",
  "hicbit.hicbit_getphotosensitiveValue": "Get the ad value of the photosensitive moudule",
  "hicbit.hicbit_lineSensorValue": "Get the line follower sensor port ad value",
  "hicbit.hicbit_photosensitiveSensor": "Get the Photosensitive sensor status,1 detect bright,0 no detect bright",
  "hicbit.hicbit_readAngle": "Send read hicbit servos angle command",
  "hicbit.hicbit_readLineFollowerStatus": "Get the condition of the line follower sensor",
  "hicbit.hicbit_runActionGroup": "Set the servo controller to run a actiongroup",
  "hicbit.hicbit_runActionGroup|param|times": "Running times. eg: 1",
  "hicbit.hicbit_setBusServo": "Set the angle of bus servo 1 to 12, range of -120~120 degree",
  "hicbit.hicbit_setFanSpeed": "Set the speed of the fan, range of -100~100.",
  "hicbit.hicbit_setMotorSpeed": "Set the speed of the number 1 motor and number 2 motor, range of -100~100, that can control the tank to go advance or turn of.",
  "hicbit.hicbit_stopActionGroup": "Stop running actiongroup",
  "hicbit.hicbit_ultrasonic": "Get the distance of ultrasonic detection to the obstacle",
  "hicbit.onhicbit_getAngle": "Do someting when hicbit receive angle",
  "hicbit.onhicbit_getAngle|param|body": "code to run when event is raised",
  "hicbit.setArrayServo": "Set the angle of servo 1 to 8, range of 0~270 degree",
  "hicbit.setDisplay": "Display ultrasonic distance",
  "hicbit.setServo": "Set the angle of servo 1 to 8, range of 0~270 degree",
  "hicbitRGBColors": "hicbitRGBLight package",
  "hicbitRGBLight": "QbitRGBLight Functions",
  "hicbitRGBLight.LHhicbitRGBLight": "A LHQbitRGBLight class",
  "hicbitRGBPixelMode": "Different modes for RGB or RGB+W RGBLight QbitRGBColors"
}